/**
 * ABI Decoder Demo
 * Demonstrate ABI parser tool usage
 */

const ABIDecoder = require('./abi-decoder');
const path = require('path');

async function runDemo() {
  console.log('üöÄ ABI Decoder Demo\n');

  const decoder = new ABIDecoder();

  try {
    const abiPath = path.join(__dirname, '..', 'config', 'taskAbi.json');
    decoder.loadABI(abiPath);

    console.log('\nüîç Decoding Example:\n');

    console.log('reportResult:');
    const reportResultData = '0x9f59af7fde212d532a9c9d2e9870c8d827edcce688423b0b84f5bdb74769152e4605911b00000000000000000000000000000000000000000000000000000000000000600000000000000000000000000000000000000000000000000000000000000560000000000000000000000000810b7bacefd5ba495bb688bbfd2501c904036ab700000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000044000000000000000000000000000000000000000000000000000000000000004a0000000000000000000000000000000000000000000000000000001999458f4aa00000000000000000000000000000000000000000000000000000000000004c0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000080000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000004a68747470733a2f2f7777772e6f6b782e636f6d2f6170692f76352f7075626c69632f696e737472756d656e74733f696e7374547970653d53504f5426696e737449643d4254432da000000000000000000000000000000000000000000000000000000000000000c00000000000000000000000000000000000000000000000000000000000000008696e73745479706500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012242e646174615b305d2e696e737454797065000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000287b22696e737454797065223a2253504f54222c22696e7374547970652e636f756e74223a2231227d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001c7b22616c676f726974686d54797065223a2270726f7879746c73227d000000000000000000000000000000000000000000000000000000000000000000000041ebdb99491af66cc476e1dff8f02677498acfeddee4ee01abd7b6c56c35ea8f2f67af66e47fd9389a28de5f5d75ed6b342f12a56c667dff3730137d1cca3219781b00000000000000000000000000000000000000000000000000000000000000';
    const reportResult = decoder.decodeData(reportResultData);
    console.log('reportResult:', reportResult);
    console.log('reportResult formatted:', decoder.formatResult(reportResult));

    console.log('\n‚úÖ Demo completed successfully!');

  } catch (error) {
    console.error(`‚ùå Demo failed: ${error.message}`);
  }
}

// Run demo
if (require.main === module) {
  runDemo();
}

module.exports = { runDemo };
